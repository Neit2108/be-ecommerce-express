generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  BANNED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model User {
  // Primary fields
  id          String     @id @default(uuid())
  email       String     @unique
  password    String
  identityCard String?    @unique
  
  // Personal information
  firstName   String     @map("first_name")
  lastName    String     @map("last_name")
  phoneNumber String?    @map("phone_number") @unique
  address     String?
  birthday    DateTime?
  gender      Gender?
  avatarUrl   String?    @map("avatar_url")
  
  // Status and verification
  status        UserStatus @default(PENDING)
  emailVerified Boolean    @default(false) @map("email_verified")
  emailVerifiedAt DateTime? @map("email_verified_at")
  
  // Security fields
  lastLoginAt   DateTime? @map("last_login_at")
  passwordResetToken String? @map("password_reset_token")
  passwordResetExpires DateTime? @map("password_reset_expires")
  
  // Auditable fields
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  createdBy   String?    @map("created_by")
  updatedBy   String?    @map("updated_by")
  
  // Soft delete fields
  deletedAt   DateTime?  @map("deleted_at")
  deletedBy   String?    @map("deleted_by")

  // relation
  shop Shop? @relation("ShopOwner")
  kycData KycData[]

  @@map("users")
  @@index([email])
  @@index([status])
  @@index([emailVerified])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([phoneNumber])
  @@index([firstName, lastName])
}

enum KycStatus{
  INCOMPLETE
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum DocumentType{
  IDENTITY_CARD
}

enum DocumentStatus{
  PENDING
  VERIFIED
  REJECTED
}

// Shop Management
enum ShopStatus {
  DRAFT
  ACTIVE
  INACTIVE
  SUSPENDED
  CLOSED
}

enum ApprovalStatus {
  PENDING_APPROVAL
  PENDING_KYC
  APPROVED
  REJECTED
  REVIEWING
  REQUIRES_DOCUMENTS
}

model Shop {
  // Primary fields
  id      String     @id @default(uuid())
  ownerId String     @map("owner_id") @unique
  name    String
  status  ShopStatus @default(INACTIVE)
  logoUrl         String?        @map("logo_url")
  email   String?    @map("email") @unique
  phoneNumber String? @map("phone_number") @unique
  
  // Address fields 
  street      String?
  ward        String?
  district       String?
  city  String?  
  country     String @default("Vietnamese")

  // Business config
  category    String? // bán gì ? Quần áo, giày dép, công nghệ...
  isVerified      Boolean        @default(false) @map("is_verified") // giống shopee mall á
  verifiedAt      DateTime?      @map("verified_at")

  //operation
  autoApprove     Boolean        @default(false) @map("auto_approve") // tu xac nhan don hang
  
  // Approval
  approvalStatus  ApprovalStatus @default(PENDING) @map("approval_status")
  approvedBy      String?        @map("approved_by")
  approvedAt      DateTime?      @map("approved_at")
  rejectionReason String?        @map("rejection_reason")

  // bank acc
  taxCode         String?        @map("tax_code")
  bankName        String?        @map("bank_name")
  bankAccount     String?        @map("bank_account")
  accountNumber   String?        @map("account_number")

  // statistic
  totalRevenue    Decimal        @default(0) @map("total_revenue") @db.Decimal(15,2)
  totalOrders     Int            @default(0) @map("total_orders")
  rating          Decimal?       @db.Decimal(3,2) // trung bình từ sp trong shop
  reviewCount     Int            @default(0) @map("review_count")

  // Auditable fields
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  createdBy   String?    @map("created_by") 
  updatedBy   String?    @map("updated_by") 
  
  // Soft delete fields
  deletedAt   DateTime?  @map("deleted_at")
  deletedBy   String?    @map("deleted_by") 
  
  // Relations
  owner    User       @relation("ShopOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  products Product[] // 1 shop có nhiều products
  kycData  KycData[]
  
  @@map("shops")
  @@index([ownerId])
  @@index([status])
  @@index([name])
  @@index([city])
  @@index([createdAt])
  @@index([deletedAt])
}

model KycData{
  id                String    @id @default(uuid())
  status            KYCStatus @default(INCOMPLETE)
  submittedAt       DateTime?
  reviewedAt        DateTime?
  approvedAt        DateTime?
  rejectedAt        DateTime?
  reviewerNote      String?
  expiryDate        DateTime? // Ngày hết hạn KYC

  // nguoi gui
  fullName          String?
  birthday          DateTime?
  personalAddress   String?
  personalPhone     String?
  personalEmail     String?
  identityCard      String? // Số CMND/CCCD

  // shop
  shopName      String?
  taxCode       String?
  shopAddress   String?
  shopPhone     String?
  shopEmail     String?
  shopRegDate   DateTime? // Ngày đăng ký kinh doanh

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  shopId String

  user      User          @relation(fields: [userId], references: [id])
  shop      Shop          @relation(fields: [shopId], references: [id])
  documents KycDocument[]
  history   KycHistory[]

  @@unique([shopId])
  @@map("kyc_data")
}

model KycDocument{
  id           String         @id @default(uuid())
  type         DocumentType
  status       DocumentStatus @default(PENDING)
  fileName     String
  fileUrl      String
  fileSize     Int?
  mimeType     String?
  uploadedAt   DateTime       @default(now())
  verifiedAt   DateTime?
  rejectedAt   DateTime?
  verifierNote String?        // Ghi chú của người xác minh
  
  // Foreign key
  kycDataId String

  // Relations
  kycData KycData @relation(fields: [kycDataId], references: [id], onDelete: Cascade)

  @@map("kyc_documents")
}

model KycHistory {
  id          String    @id @default(uuid())
  action      String    // CREATE, UPDATE, APPROVE, REJECT, etc.
  oldStatus   KycStatus?
  newStatus   KycStatus?
  reason      String?
  performedBy String?   // ID của người thực hiện
  performedAt DateTime  @default(now())
  metadata    Json?     // Thông tin bổ sung dạng JSON

  kycDataId String

  kycData KycData @relation(fields: [kycDataId], references: [id], onDelete: Cascade)

  @@map("kyc_history")
}

model KycSettings {
  id                    String   @id @default(uuid())
  requiredDocuments     String[] // Array of DocumentType
  kycExpiryDays        Int      @default(365) // KYC hết hạn sau bao nhiêu ngày
  autoApprovalEnabled  Boolean  @default(false)
  maxFileSize          Int      @default(10485760) // 10MB in bytes
  allowedMimeTypes     String[] // ["image/jpeg", "image/png", "application/pdf"]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("kyc_settings")
}

// Product Management
enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  OUT_OF_STOCK
  DISCONTINUED
}

model Product {
  // Primary fields
  id            String        @id @default(uuid())
  shopId        String        @map("shop_id")
  name          String
  averageRating Float         @default(0) @map("average_rating")
  reviewCount   Int           @default(0) @map("review_count")
  status        ProductStatus @default(DRAFT)
  
  // Auditable fields
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  createdBy   String?    @map("created_by") // User ID who created
  updatedBy   String?    @map("updated_by") // User ID who last updated
  
  // Soft delete fields
  deletedAt   DateTime?  @map("deleted_at")
  deletedBy   String?    @map("deleted_by") // User ID who deleted
  
  // Product relations
  shop     Shop              @relation(fields: [shopId], references: [id], onDelete: Cascade)
  variants ProductVariant[]
  images   ProductImage[]
  options  ProductOption[]
  categories ProductCategory[]
  
  @@map("products")
  @@index([shopId])
  @@index([status])
  @@index([name])
  @@index([averageRating])
  @@index([createdAt])
  @@index([deletedAt])
}

model ProductVariant {
  // Primary fields
  id          String        @id @default(uuid())
  productId   String        @map("product_id")
  sku         String        @unique
  name        String
  value       String
  price       Decimal       @db.Decimal(10, 2)
  currency    String        @default("VND") // For Money value object
  status      ProductStatus @map("product_status") @default(DRAFT)
  description String?
  
  // Auditable fields
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  createdBy   String?    @map("created_by") // User ID who created
  updatedBy   String?    @map("updated_by") // User ID who last updated
  
  // Soft delete fields
  deletedAt   DateTime?  @map("deleted_at")
  deletedBy   String?    @map("deleted_by") // User ID who deleted
  
  // Product variant relations
  product      Product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
  images       ProductImage[]
  optionValues ProductVariantOptionValue[]
  
  @@map("product_variants")
  @@index([productId])
  @@index([sku])
  @@index([status])
  @@index([price])
  @@index([createdAt])
  @@index([deletedAt])
}

model ProductImage {
  // Primary fields
  id          String  @id @default(uuid())
  productId   String  @map("product_id")
  variantId   String? @map("variant_id")
  imageUrl    String  @map("image_url")
  isPrimary   Boolean @default(false) @map("is_primary")
  sortOrder   Int     @default(0) @map("sort_order")
  description String?
  
  // Auditable fields
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  createdBy   String?    @map("created_by") // User ID who created
  updatedBy   String?    @map("updated_by") // User ID who last updated
  
  // Soft delete fields
  deletedAt   DateTime?  @map("deleted_at")
  deletedBy   String?    @map("deleted_by") // User ID who deleted
  
  // Product image relations
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
  @@index([productId])
  @@index([variantId])
  @@index([isPrimary])
  @@index([sortOrder])
  @@index([createdAt])
  @@index([deletedAt])
}

model ProductOption {
  // Primary fields
  id        String @id @default(uuid())
  productId String @map("product_id")
  name      String @db.Citext
  
  // Auditable fields
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  createdBy   String?    @map("created_by") // User ID who created
  updatedBy   String?    @map("updated_by") // User ID who last updated
  
  // Soft delete fields
  deletedAt   DateTime?  @map("deleted_at")
  deletedBy   String?    @map("deleted_by") // User ID who deleted
  
  // Product option relations
  product                   Product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
  values                    ProductOptionValue[]
  productVariantOptionValues ProductVariantOptionValue[]
  
  @@unique([productId, name])
  @@map("product_options")
  @@index([productId])
  @@index([name])
  @@index([createdAt])
  @@index([deletedAt])
}

model ProductOptionValue {
  // Primary fields
  id              String @id @default(uuid())
  productOptionId String @map("product_option_id")
  value           String @db.Citext
  sortOrder       Int    @default(0) @map("sort_order")
  
  // Auditable fields
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  createdBy   String?    @map("created_by") // User ID who created
  updatedBy   String?    @map("updated_by") // User ID who last updated
  
  // Soft delete fields
  deletedAt   DateTime?  @map("deleted_at")
  deletedBy   String?    @map("deleted_by") // User ID who deleted
  
  // Product option value relations
  productOption              ProductOption               @relation(fields: [productOptionId], references: [id], onDelete: Cascade)
  productVariantOptionValues ProductVariantOptionValue[]
  
  @@unique([productOptionId, value])
  @@map("product_option_values")
  @@index([productOptionId])
  @@index([sortOrder])
  @@index([value])
  @@index([createdAt])
  @@index([deletedAt])
}

model ProductVariantOptionValue {
  // Primary fields
  id                   String @id @default(uuid())
  productVariantId     String @map("product_variant_id")
  productOptionId      String @map("product_option_id")
  productOptionValueId String @map("product_option_value_id")
  
  // Auditable fields
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  createdBy   String?    @map("created_by") // User ID who created
  updatedBy   String?    @map("updated_by") // User ID who last updated
  
  // Soft delete fields
  deletedAt   DateTime?  @map("deleted_at")
  deletedBy   String?    @map("deleted_by") // User ID who deleted
  
  // Many-to-many relation fields
  productVariant     ProductVariant     @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productOption      ProductOption      @relation(fields: [productOptionId], references: [id], onDelete: Cascade)
  productOptionValue ProductOptionValue @relation(fields: [productOptionValueId], references: [id], onDelete: Cascade)
  
  @@map("product_variant_option_values")
  @@unique([productVariantId, productOptionId])
  @@index([productVariantId])
  @@index([productOptionId])
  @@index([productOptionValueId])
  @@index([createdAt])
  @@index([deletedAt])
}

// Category Management
model Category {
  // Primary fields
  id               String  @id @default(uuid())
  name             String
  description      String  @default("")
  parentCategoryId String? @map("parent_category_id")
  
  // Auditable fields
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  createdBy   String?    @map("created_by") // User ID who created
  updatedBy   String?    @map("updated_by") // User ID who last updated
  
  // Soft delete fields
  deletedAt   DateTime?  @map("deleted_at")
  deletedBy   String?    @map("deleted_by") // User ID who deleted
  
  // Self-referencing relations
  parentCategory Category?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories Category[] @relation("CategoryHierarchy")
  
  // Many-to-many relation with products
  products ProductCategory[]
  
  @@map("categories")
  @@index([name])
  @@index([parentCategoryId])
  @@index([createdAt])
  @@index([deletedAt])
}

// many to many product and category
model ProductCategory {
  // Primary fields
  id         String @id @default(uuid())
  productId  String @map("product_id")
  categoryId String @map("category_id")
  
  // Auditable fields
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  createdBy   String?    @map("created_by") // User ID who created
  updatedBy   String?    @map("updated_by") // User ID who last updated
  
  // Soft delete fields
  deletedAt   DateTime?  @map("deleted_at")
  deletedBy   String?    @map("deleted_by") // User ID who deleted
  
  // Relations
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@map("product_categories")
  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
  @@index([createdAt])
  @@index([deletedAt])
}