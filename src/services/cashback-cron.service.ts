import cron, { ScheduledTask } from 'node-cron';
import { CashbackService } from './cashback.service';
import { PaymentService } from './payment.service';

export class CashbackCronService {
  private jobs: ScheduledTask[] = [];
  private isRunning: boolean = false;

  constructor(
    private cashbackService: CashbackService,
    private paymentService: PaymentService
  ) {}

  /**
   * Kh·ªüi ƒë·ªông t·∫•t c·∫£ cronjobs
   */
  start(): void {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è  Cashback cronjobs ƒë√£ ch·∫°y');
      return;
    }

    console.log('üöÄ B·∫Øt ƒë·∫ßu ch·∫°y cashback cronjob...');

    this.startProcessPendingCashbacksJob();
    this.startRetryFailedCashbacksJob();
    this.startCancelExpiredCashbacksJob();
    this.startProcessExpiredPaymentsJob();

    this.isRunning = true;
    console.log('‚úÖ Cashback cronjobs ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng');
  }

  /**
   * D·ª´ng t·∫•t c·∫£ cronjobs
   */
  stop(): void {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è  Cashback cronjobs ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông');
      return;
    }

    this.jobs.forEach((job) => job.stop());
    this.jobs = [];
    this.isRunning = false;
    console.log('üõë Cashback cronjobs ƒë√£ d·ª´ng l·∫°i');
  }

  /**
   * L·∫•y tr·∫°ng th√°i c·ªßa cronjobs
   */
  getStatus(): {
    isRunning: boolean;
    totalJobs: number;
    jobs: { name: string; schedule: string }[];
  } {
    return {
      isRunning: this.isRunning,
      totalJobs: this.jobs.length,
      jobs: [
        { name: 'Process Pending Cashbacks', schedule: '*/5 * * * *' },
        { name: 'Retry Failed Cashbacks', schedule: '*/30 * * * *' },
        { name: 'Cancel Expired Cashbacks', schedule: '0 * * * *' },
        { name: 'Process Expired Payments', schedule: '*/10 * * * *' },
      ],
    };
  }

  /**
   *  X·ª≠ l√Ω pending cashbacks - ch·∫°y m·ªói 5 ph√∫t
   * G·ª≠i c√°c cashback ƒë√£ ƒë·ªß ƒëi·ªÅu ki·ªán (eligibleAt <= now) l√™n blockchain
   */
  private startProcessPendingCashbacksJob(): void {
    const job = cron.schedule(
      '*/5 * * * *', // M·ªói 5 ph√∫t
      async () => {
        try {
          const startTime = Date.now();
          console.log('\nüîÑ [CRON] X·ª≠ l√Ω cashback ƒëang ch·ªù...');

          const results = await this.cashbackService.processPendingCashbacks(50);

          const successCount = results.filter((r) => r.success).length;
          const failCount = results.filter((r) => !r.success).length;
          const duration = Date.now() - startTime;

          console.log(
            `‚úÖ [CRON] ƒê√£ x·ª≠ l√Ω ${successCount}/${results.length} cashback th√†nh c√¥ng (${failCount} th·∫•t b·∫°i) - Th·ªùi gian: ${duration}ms`
          );

          if (failCount > 0) {
            console.log(`‚ùå [CRON] Cashback th·∫•t b·∫°i:`, {
              failed: results.filter((r) => !r.success).map((r) => ({
                cashbackId: r.cashbackId,
                error: r.error,
              })),
            });
          }
        } catch (error) {
          console.error('‚ùå [CRON] L·ªói khi x·ª≠ l√Ω cashback:', error);
        }
      },
      {
        timezone: 'Asia/Ho_Chi_Minh',
      }
    );

    this.jobs.push(job);
  }

  /**
   * Retry failed cashbacks - ch·∫°y m·ªói 30 ph√∫t
   * Th·ª≠ l·∫°i c√°c cashback ƒë√£ failed (t·ªëi ƒëa 3 l·∫ßn)
   */
  private startRetryFailedCashbacksJob(): void {
    const job = cron.schedule(
      '*/30 * * * *', // M·ªói 30 ph√∫t
      async () => {
        try {
          const startTime = Date.now();
          console.log('\nüîÑ [CRON] Th·ª≠ l·∫°i c√°c cashback th·∫•t b·∫°i...');

          const results = await this.cashbackService.retryFailedCashbacks(3);

          const successCount = results.filter((r) => r.success).length;
          const duration = Date.now() - startTime;

          console.log(
            `‚úÖ [CRON] ƒê√£ th·ª≠ l·∫°i ${successCount}/${results.length} cashback - Th·ªùi gian: ${duration}ms`
          );

          if (results.length > 0) {
            console.log(`‚ÑπÔ∏è  [CRON] K·∫øt qu·∫£ th·ª≠ l·∫°i:`, {
              results: results.map((r) => ({
                cashbackId: r.cashbackId,
                success: r.success,
                message: r.message,
              })),
            });
          }
        } catch (error) {
          console.error('‚ùå [CRON] L·ªói khi th·ª≠ l·∫°i cashback th·∫•t b·∫°i:', error);
        }
      },
      {
        timezone: 'Asia/Ho_Chi_Minh',
      }
    );

    this.jobs.push(job);
  }

  /**
   * ‚ú® Cancel expired cashbacks - ch·∫°y m·ªói 1 gi·ªù
   * H·ªßy c√°c cashback ƒë√£ qu√° h·∫°n claim (expiresAt < now)
   */
  private startCancelExpiredCashbacksJob(): void {
    const job = cron.schedule(
      '0 * * * *', // M·ªói gi·ªù (ph√∫t 0)
      async () => {
        try {
          const startTime = Date.now();
          console.log('\nüîÑ [CRON] H·ªßy c√°c cashback ƒë√£ h·∫øt h·∫°n...');

          const count = await this.cashbackService.cancelExpiredCashbacks();
          const duration = Date.now() - startTime;

          console.log(
            `‚úÖ [CRON] ƒê√£ h·ªßy ${count} cashback ƒë√£ h·∫øt h·∫°n - Th·ªùi gian: ${duration}ms`
          );
        } catch (error) {
          console.error('‚ùå [CRON] L·ªói khi h·ªßy cashback ƒë√£ h·∫øt h·∫°n:', error);
        }
      },
      {
        timezone: 'Asia/Ho_Chi_Minh',
      }
    );

    this.jobs.push(job);
  }

  /**
   * ‚ú® Process expired payments - ch·∫°y m·ªói 10 ph√∫t
   * ƒê√°nh d·∫•u c√°c payment ƒë√£ h·∫øt h·∫°n thanh to√°n (expiredAt < now) sang FAILED
   */
  private startProcessExpiredPaymentsJob(): void {
    const job = cron.schedule(
      '*/10 * * * *', // M·ªói 10 ph√∫t
      async () => {
        try {
          const startTime = Date.now();
          console.log('\nüîÑ [CRON] X·ª≠ l√Ω c√°c thanh to√°n h·∫øt h·∫°n...');

          const count = await this.paymentService.processExpiredPayments();
          const duration = Date.now() - startTime;

          console.log(
            `‚úÖ [CRON] ƒê√£ x·ª≠ l√Ω ${count} thanh to√°n h·∫øt h·∫°n - Th·ªùi gian: ${duration}ms`
          );
        } catch (error) {
          console.error('‚ùå [CRON] L·ªói khi x·ª≠ l√Ω thanh to√°n h·∫øt h·∫°n:', error);
        }
      },
      {
        timezone: 'Asia/Ho_Chi_Minh',
      }
    );

    this.jobs.push(job);
  }

  /**
   * Manual trigger - ƒë·ªÉ test
   */
  async manualTrigger(jobName: string): Promise<any> {
    console.log(`üîß [MANUAL] Triggering job: ${jobName}`);

    switch (jobName) {
      case 'processPending':
        return await this.cashbackService.processPendingCashbacks(50);

      case 'retryFailed':
        return await this.cashbackService.retryFailedCashbacks(3);

      case 'cancelExpired':
        return await this.cashbackService.cancelExpiredCashbacks();

      case 'processExpiredPayments':
        return await this.paymentService.processExpiredPayments();

      default:
        throw new Error(`Unknown job: ${jobName}`);
    }
  }
}